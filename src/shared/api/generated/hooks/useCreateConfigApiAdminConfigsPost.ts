/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  CreateConfigApiAdminConfigsPostMutationRequest,
  CreateConfigApiAdminConfigsPostMutationResponse,
  CreateConfigApiAdminConfigsPost400,
  CreateConfigApiAdminConfigsPost422,
  CreateConfigApiAdminConfigsPost500,
} from '../types/CreateConfigApiAdminConfigsPost.ts'
import { useMutation } from '@tanstack/react-query'
import { createConfigApiAdminConfigsPost } from '../clients/createConfigApiAdminConfigsPost.ts'

export const createConfigApiAdminConfigsPostMutationKey = () => [{ url: '/api/admin/configs/' }] as const

export type CreateConfigApiAdminConfigsPostMutationKey = ReturnType<typeof createConfigApiAdminConfigsPostMutationKey>

/**
 * @description Создать новую конфигурацию
 * @summary Create Config
 * {@link /api/admin/configs/}
 */
export function useCreateConfigApiAdminConfigsPost<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateConfigApiAdminConfigsPostMutationResponse,
      ResponseErrorConfig<CreateConfigApiAdminConfigsPost400 | CreateConfigApiAdminConfigsPost422 | CreateConfigApiAdminConfigsPost500>,
      { data: CreateConfigApiAdminConfigsPostMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<CreateConfigApiAdminConfigsPostMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? createConfigApiAdminConfigsPostMutationKey()

  return useMutation<
    CreateConfigApiAdminConfigsPostMutationResponse,
    ResponseErrorConfig<CreateConfigApiAdminConfigsPost400 | CreateConfigApiAdminConfigsPost422 | CreateConfigApiAdminConfigsPost500>,
    { data: CreateConfigApiAdminConfigsPostMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return createConfigApiAdminConfigsPost(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}