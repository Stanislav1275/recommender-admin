/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  RecByTitleApiTitlesRelavantGetQueryResponse,
  RecByTitleApiTitlesRelavantGetQueryParams,
  RecByTitleApiTitlesRelavantGet422,
} from '../types/RecByTitleApiTitlesRelavantGet.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'
import { recByTitleApiTitlesRelavantGet } from '../clients/recByTitleApiTitlesRelavantGet.ts'

export const recByTitleApiTitlesRelavantGetSuspenseQueryKey = (params: RecByTitleApiTitlesRelavantGetQueryParams) =>
  [{ url: '/api/titles/relavant' }, ...(params ? [params] : [])] as const

export type RecByTitleApiTitlesRelavantGetSuspenseQueryKey = ReturnType<typeof recByTitleApiTitlesRelavantGetSuspenseQueryKey>

export function recByTitleApiTitlesRelavantGetSuspenseQueryOptions(
  params: RecByTitleApiTitlesRelavantGetQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = recByTitleApiTitlesRelavantGetSuspenseQueryKey(params)
  return queryOptions<
    RecByTitleApiTitlesRelavantGetQueryResponse,
    ResponseErrorConfig<RecByTitleApiTitlesRelavantGet422>,
    RecByTitleApiTitlesRelavantGetQueryResponse,
    typeof queryKey
  >({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return recByTitleApiTitlesRelavantGet(params, config)
    },
  })
}

/**
 * @summary Rec By Title
 * {@link /api/titles/relavant}
 */
export function useRecByTitleApiTitlesRelavantGetSuspense<
  TData = RecByTitleApiTitlesRelavantGetQueryResponse,
  TQueryKey extends QueryKey = RecByTitleApiTitlesRelavantGetSuspenseQueryKey,
>(
  params: RecByTitleApiTitlesRelavantGetQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<RecByTitleApiTitlesRelavantGetQueryResponse, ResponseErrorConfig<RecByTitleApiTitlesRelavantGet422>, TData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? recByTitleApiTitlesRelavantGetSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(recByTitleApiTitlesRelavantGetSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<RecByTitleApiTitlesRelavantGet422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}