/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { HealthCheckApiHealthGetQueryResponse } from '../types/HealthCheckApiHealthGet.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'
import { healthCheckApiHealthGet } from '../clients/healthCheckApiHealthGet.ts'

export const healthCheckApiHealthGetQueryKey = () => [{ url: '/api/health' }] as const

export type HealthCheckApiHealthGetQueryKey = ReturnType<typeof healthCheckApiHealthGetQueryKey>

export function healthCheckApiHealthGetQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = healthCheckApiHealthGetQueryKey()
  return queryOptions<HealthCheckApiHealthGetQueryResponse, ResponseErrorConfig<Error>, HealthCheckApiHealthGetQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return healthCheckApiHealthGet(config)
    },
  })
}

/**
 * @summary Health Check
 * {@link /api/health}
 */
export function useHealthCheckApiHealthGet<
  TData = HealthCheckApiHealthGetQueryResponse,
  TQueryData = HealthCheckApiHealthGetQueryResponse,
  TQueryKey extends QueryKey = HealthCheckApiHealthGetQueryKey,
>(
  options: {
    query?: Partial<QueryObserverOptions<HealthCheckApiHealthGetQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? healthCheckApiHealthGetQueryKey()

  const query = useQuery(
    {
      ...(healthCheckApiHealthGetQueryOptions(config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}