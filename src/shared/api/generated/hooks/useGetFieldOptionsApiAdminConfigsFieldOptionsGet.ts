/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  GetFieldOptionsApiAdminConfigsFieldOptionsGetQueryResponse,
  GetFieldOptionsApiAdminConfigsFieldOptionsGet500,
} from '../types/GetFieldOptionsApiAdminConfigsFieldOptionsGet.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'
import { getFieldOptionsApiAdminConfigsFieldOptionsGet } from '../clients/getFieldOptionsApiAdminConfigsFieldOptionsGet.ts'

export const getFieldOptionsApiAdminConfigsFieldOptionsGetQueryKey = () => [{ url: '/api/admin/configs/field-options' }] as const

export type GetFieldOptionsApiAdminConfigsFieldOptionsGetQueryKey = ReturnType<typeof getFieldOptionsApiAdminConfigsFieldOptionsGetQueryKey>

export function getFieldOptionsApiAdminConfigsFieldOptionsGetQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getFieldOptionsApiAdminConfigsFieldOptionsGetQueryKey()
  return queryOptions<
    GetFieldOptionsApiAdminConfigsFieldOptionsGetQueryResponse,
    ResponseErrorConfig<GetFieldOptionsApiAdminConfigsFieldOptionsGet500>,
    GetFieldOptionsApiAdminConfigsFieldOptionsGetQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getFieldOptionsApiAdminConfigsFieldOptionsGet(config)
    },
  })
}

/**
 * @description Получить опции полей для админ-панели
 * @summary Get Field Options
 * {@link /api/admin/configs/field-options}
 */
export function useGetFieldOptionsApiAdminConfigsFieldOptionsGet<
  TData = GetFieldOptionsApiAdminConfigsFieldOptionsGetQueryResponse,
  TQueryData = GetFieldOptionsApiAdminConfigsFieldOptionsGetQueryResponse,
  TQueryKey extends QueryKey = GetFieldOptionsApiAdminConfigsFieldOptionsGetQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetFieldOptionsApiAdminConfigsFieldOptionsGetQueryResponse,
        ResponseErrorConfig<GetFieldOptionsApiAdminConfigsFieldOptionsGet500>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getFieldOptionsApiAdminConfigsFieldOptionsGetQueryKey()

  const query = useQuery(
    {
      ...(getFieldOptionsApiAdminConfigsFieldOptionsGetQueryOptions(config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetFieldOptionsApiAdminConfigsFieldOptionsGet500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}