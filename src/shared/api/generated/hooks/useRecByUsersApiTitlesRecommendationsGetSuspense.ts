/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  RecByUsersApiTitlesRecommendationsGetQueryResponse,
  RecByUsersApiTitlesRecommendationsGetQueryParams,
  RecByUsersApiTitlesRecommendationsGet422,
} from '../types/RecByUsersApiTitlesRecommendationsGet.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'
import { recByUsersApiTitlesRecommendationsGet } from '../clients/recByUsersApiTitlesRecommendationsGet.ts'

export const recByUsersApiTitlesRecommendationsGetSuspenseQueryKey = (params: RecByUsersApiTitlesRecommendationsGetQueryParams) =>
  [{ url: '/api/titles/recommendations' }, ...(params ? [params] : [])] as const

export type RecByUsersApiTitlesRecommendationsGetSuspenseQueryKey = ReturnType<typeof recByUsersApiTitlesRecommendationsGetSuspenseQueryKey>

export function recByUsersApiTitlesRecommendationsGetSuspenseQueryOptions(
  params: RecByUsersApiTitlesRecommendationsGetQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = recByUsersApiTitlesRecommendationsGetSuspenseQueryKey(params)
  return queryOptions<
    RecByUsersApiTitlesRecommendationsGetQueryResponse,
    ResponseErrorConfig<RecByUsersApiTitlesRecommendationsGet422>,
    RecByUsersApiTitlesRecommendationsGetQueryResponse,
    typeof queryKey
  >({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return recByUsersApiTitlesRecommendationsGet(params, config)
    },
  })
}

/**
 * @summary Rec By Users
 * {@link /api/titles/recommendations}
 */
export function useRecByUsersApiTitlesRecommendationsGetSuspense<
  TData = RecByUsersApiTitlesRecommendationsGetQueryResponse,
  TQueryKey extends QueryKey = RecByUsersApiTitlesRecommendationsGetSuspenseQueryKey,
>(
  params: RecByUsersApiTitlesRecommendationsGetQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        RecByUsersApiTitlesRecommendationsGetQueryResponse,
        ResponseErrorConfig<RecByUsersApiTitlesRecommendationsGet422>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? recByUsersApiTitlesRecommendationsGetSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(recByUsersApiTitlesRecommendationsGetSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<RecByUsersApiTitlesRecommendationsGet422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}