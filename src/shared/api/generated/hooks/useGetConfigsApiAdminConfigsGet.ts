/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  GetConfigsApiAdminConfigsGetQueryResponse,
  GetConfigsApiAdminConfigsGetQueryParams,
  GetConfigsApiAdminConfigsGet422,
  GetConfigsApiAdminConfigsGet500,
} from '../types/GetConfigsApiAdminConfigsGet.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'
import { getConfigsApiAdminConfigsGet } from '../clients/getConfigsApiAdminConfigsGet.ts'

export const getConfigsApiAdminConfigsGetQueryKey = (params?: GetConfigsApiAdminConfigsGetQueryParams) =>
  [{ url: '/api/admin/configs/' }, ...(params ? [params] : [])] as const

export type GetConfigsApiAdminConfigsGetQueryKey = ReturnType<typeof getConfigsApiAdminConfigsGetQueryKey>

export function getConfigsApiAdminConfigsGetQueryOptions(
  params?: GetConfigsApiAdminConfigsGetQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getConfigsApiAdminConfigsGetQueryKey(params)
  return queryOptions<
    GetConfigsApiAdminConfigsGetQueryResponse,
    ResponseErrorConfig<GetConfigsApiAdminConfigsGet422 | GetConfigsApiAdminConfigsGet500>,
    GetConfigsApiAdminConfigsGetQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getConfigsApiAdminConfigsGet(params, config)
    },
  })
}

/**
 * @description Получить список конфигураций
 * @summary Get Configs
 * {@link /api/admin/configs/}
 */
export function useGetConfigsApiAdminConfigsGet<
  TData = GetConfigsApiAdminConfigsGetQueryResponse,
  TQueryData = GetConfigsApiAdminConfigsGetQueryResponse,
  TQueryKey extends QueryKey = GetConfigsApiAdminConfigsGetQueryKey,
>(
  params?: GetConfigsApiAdminConfigsGetQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetConfigsApiAdminConfigsGetQueryResponse,
        ResponseErrorConfig<GetConfigsApiAdminConfigsGet422 | GetConfigsApiAdminConfigsGet500>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getConfigsApiAdminConfigsGetQueryKey(params)

  const query = useQuery(
    {
      ...(getConfigsApiAdminConfigsGetQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetConfigsApiAdminConfigsGet422 | GetConfigsApiAdminConfigsGet500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}